import binascii

# S盒
s_box = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

# Rcon
r_con = (
    0x01000000, 0x02000000,
    0x04000000, 0x08000000,
    0x10000000, 0x20000000,
    0x40000000, 0x80000000,
    0x1b000000, 0x36000000,
)

# 逆S盒
re_s_box = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)

# text转list并补齐16字节
def add_to_16 (text) -> list:
    if (len(text.encode('utf-8')) % 16) :
        add = 16 - (len(text.encode('utf-8')) % 16)
    else :
        add = 0
    text = text + ('\0' * add)
    return [ord(i) for i in text]

# list转text
def list_to_text (text) -> str:
    return ''.join([chr(i) for i in text])

# s盒字节替换
def sub_bytes (state) -> list:
    for i in range(16) :
        state[i] = s_box[state[i]]
    return state

# 逆s盒字节替换
def sub_bytes_inv (state) -> list:
    for i in range(16) :
        state[i] = re_s_box[state[i]]
    return state

# 行移位
def shift_rows (state) -> list:
    state[1], state[5], state[9], state[13] = state[5], state[9], state[13], state[1]
    state[2], state[6], state[10], state[14] = state[10], state[14], state[2], state[6]
    state[3], state[7], state[11], state[15] = state[15], state[3], state[7], state[11]
    return state

# 逆行移位
def shift_rows_inv (state) -> list:
    state[1], state[5], state[9], state[13] = state[13], state[1], state[5], state[9]
    state[2], state[6], state[10], state[14] = state[10], state[14], state[2], state[6]
    state[3], state[7], state[11], state[15] = state[7], state[11], state[15], state[3]
    return state

# 伽罗华域上的乘法
def  galois_multiplication (a, b) -> int:
    p = 0
    for counter in range(8) :
        if b & 1 :
            p ^= a
        hi_bit_set = a & 0x80
        a <<= 1
        if hi_bit_set :
            a ^= 0x1b
        b >>= 1
    return p % 256

# a = [0x02, 0x03, 0x01, 0x01]
# b = [0x0E, 0x09, 0x0D, 0x0B]
# res = 0x00
# for i in range(4) :
#     res ^= galois_multiplication(a[i], b[i])
# print(hex(res))

#转16进制
def to_hex(state) -> list:
    for i in range(len(state)) :
        state[i] = hex(state[i])
    return state


# 列混合
def mix_columns (state) -> list:
    temp = state.copy()
    for line in range(4) :
        state[0+line*4] = galois_multiplication(0x02, temp[0+line*4]) ^ galois_multiplication(0x03, temp[1+line*4]) ^ temp[2+line*4] ^ temp[3+line*4]
        state[1+line*4] = temp[0+line*4] ^ galois_multiplication(0x02, temp[1+line*4]) ^ galois_multiplication(0x03, temp[2+line*4]) ^ temp[3+line*4]
        state[2+line*4] = temp[0+line*4] ^ temp[1+line*4] ^ galois_multiplication(0x02, temp[2+line*4]) ^ galois_multiplication(0x03, temp[3+line*4])
        state[3+line*4] = galois_multiplication(0x03, temp[0+line*4]) ^ temp[1+line*4] ^ temp[2+line*4] ^ galois_multiplication(0x02, temp[3+line*4])
    
    return state

# 逆列混合
def mix_columns_inv (state) -> list:
    temp = state.copy()
    for line in range(4) :
        state[0+line*4] = galois_multiplication(0x0e, temp[0+line*4]) ^ galois_multiplication(0x0b, temp[1+line*4]) ^ galois_multiplication(0x0d, temp[2+line*4]) ^ galois_multiplication(0x09, temp[3+line*4])
        state[1+line*4] = galois_multiplication(0x09, temp[0+line*4]) ^ galois_multiplication(0x0e, temp[1+line*4]) ^ galois_multiplication(0x0b, temp[2+line*4]) ^ galois_multiplication(0x0d, temp[3+line*4])
        state[2+line*4] = galois_multiplication(0x0d, temp[0+line*4]) ^ galois_multiplication(0x09, temp[1+line*4]) ^ galois_multiplication(0x0e, temp[2+line*4]) ^ galois_multiplication(0x0b, temp[3+line*4])
        state[3+line*4] = galois_multiplication(0x0b, temp[0+line*4]) ^ galois_multiplication(0x0d, temp[1+line*4]) ^ galois_multiplication(0x09, temp[2+line*4]) ^ galois_multiplication(0x0e, temp[3+line*4])

    return state

# test_state = [0xC9, 0x7A, 0x63, 0xB0, 0xE5, 0xF2, 0x9C, 0xA7, 0xFD, 0x78, 0x26, 0x82, 0x2B, 0x6E, 0x67, 0xE5]
# print(test_state)
# test_state_mix = mix_columns(test_state)
# print(test_state_mix)
# state_mix_inv = mix_columns_inv(test_state_mix) 
# print(to_hex(state_mix_inv))

# 密钥扩展T盒子
def T(temp_key, round) -> None:
    a, b, c, d = temp_key[13], temp_key[14], temp_key[15], temp_key[12]
    a, b, c, d = s_box[a], s_box[b], s_box[c], s_box[d]
    hex_temp_key = (a << 24) + (b << 16) + (c << 8) + d
    hex_temp_key = hex_temp_key ^ r_con[round]
    a, b, c, d = hex_temp_key >> 24, (hex_temp_key >> 16) & 0xff, (hex_temp_key >> 8) & 0xff, hex_temp_key & 0xff
    temp_key[0], temp_key[1], temp_key[2], temp_key[3] = temp_key[0] ^ a, temp_key[1] ^ b, temp_key[2] ^ c, temp_key[3] ^ d

# 单次密钥扩展
def key_expansion (temp_key) -> None:
    for i in range(4,16,4) :
        temp_key[i] ^= temp_key[i-4]
        temp_key[i+1] ^= temp_key[i-3]
        temp_key[i+2] ^= temp_key[i-2]
        temp_key[i+3] ^= temp_key[i-1]

# 密钥扩展16字节->176字节
def get_key (key) -> list:
    temp_key = key
    res = []
    res += temp_key
    for round in range(10) :
        T(temp_key, round)
        key_expansion(temp_key)
        res += temp_key
    return res

# key = [0x3C, 0xA1, 0x0B, 0x21, 0x57, 0xF0, 0x19, 0x16, 0x90, 0x2E, 0x13, 0x80, 0xAC, 0xC1, 0x07, 0xBD]
# print(to_hex(get_key(key)))

#  轮密钥加
def add_round_key (state, key, round) -> list:
    for i in range(16) :
        state[i] ^= key[16*round+i]
    return state

# 逆轮密钥加
def add_round_key_inv (state, key) -> list:
    for i in range(16) :
        state[i] ^= key[i]
    return state

# AES加密
def aes_encrypt (text, key) :
    state = add_to_16(text)
    key = add_to_16(key)
    key = get_key(key)
    state = add_round_key(state, key, 0)
    for round in range(1,10) :
        # 字节替换
        state = sub_bytes(state)
        # 行移位
        state = shift_rows(state)
        # 列混合
        state = mix_columns(state)
        # 轮密钥加
        state = add_round_key(state, key, round)
    # 字节替换
    state = sub_bytes(state)
    # 行移位
    state = shift_rows(state)
    # 轮密钥加
    state = add_round_key(state, key, 10)

    return state

# AES解密   
def aes_decrypt (state, key) :
    key = add_to_16(key)
    key = get_key(key)
    state = add_round_key(state, key, 10)
    round_key = []
    for round in range(9,0,-1) :
        # 逆字节替换
        state = sub_bytes_inv(state)
        # 逆行移位
        state = shift_rows_inv(state)
        # 逆列混合
        state = mix_columns_inv(state)
        # 密钥逆列混合
        round_key = key[16*round:16*(round+1)]
        round_key = mix_columns_inv(round_key)
        # 逆轮密钥加
        state = add_round_key_inv(state, round_key)
    # 逆字节替换
    state = sub_bytes_inv(state)
    # 逆行移位
    state = shift_rows_inv(state)
    # 逆轮密钥加
    round_key = key[0:16]
    state = add_round_key_inv(state, round_key)

    return state


message = "abcdefghijklmnop"
key = "ponmlkjihgfedcba"
message_ascii = add_to_16(message)
print("message_ascii:", message_ascii)
secret_list = aes_encrypt(message, key)
print("secret_list:", secret_list)
# secret = list_to_text(secret_list)
# print("secret:", secret)
message_list = aes_decrypt(secret_list, key)
print("message_list:", message_list)
message =  list_to_text(message_list)
print("message:", message)